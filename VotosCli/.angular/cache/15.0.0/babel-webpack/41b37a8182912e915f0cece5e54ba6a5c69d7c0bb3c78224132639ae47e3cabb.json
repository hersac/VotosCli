{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { Usuario } from '../modelos/usuario.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-cookie-service\";\nexport class SeguridadService {\n  constructor(http, router, cookies) {\n    this.http = http;\n    this.router = router;\n    this.cookies = cookies;\n    this.elUsuario = new BehaviorSubject(new Usuario());\n    this.verificarSesionActual();\n  }\n  verificarSesionActual() {\n    let sesionActual = this.getDatosSesion();\n    if (sesionActual) {\n      this.setUsuario(JSON.parse(sesionActual));\n    }\n  }\n  getDatosSesion() {\n    let sesionActual = localStorage.getItem('sesion');\n    return sesionActual;\n  }\n  setUsuario(user) {\n    this.elUsuario.next(user);\n  }\n  getUsuario() {\n    return this.elUsuario.asObservable();\n  }\n  login(infoUsuario) {\n    return this.http.post(\"http://localhost:8000/login\", infoUsuario);\n  }\n  logout() {\n    localStorage.removeItem('sesion');\n    this.setUsuario(new Usuario());\n  }\n  get usuarioSesionActiva() {\n    return this.elUsuario.value;\n  }\n  guardarDatosSesion(datosSesion) {\n    let sesionActual = localStorage.getItem('sesion');\n    let data = {\n      _id: datosSesion.user_id,\n      token: datosSesion.token\n    };\n    localStorage.setItem('sesion', JSON.stringify(data));\n    this.setUsuario(data);\n  }\n  sesionExiste() {\n    let sesionActual = this.getDatosSesion();\n    return sesionActual ? true : false;\n  }\n  crearUsuario(infoUsuario) {\n    return this.http.post(\"http://localhost:8000/registrar\", infoUsuario);\n  }\n  setToken(token) {\n    // this.cookies.set(\"token\", token);\n  }\n  getToken() {\n    return this.cookies.get(\"token\");\n  }\n  static #_ = this.ɵfac = function SeguridadService_Factory(t) {\n    return new (t || SeguridadService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.CookieService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SeguridadService,\n    factory: SeguridadService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAIA,SAAQA,eAAe,QAAmB,MAAM;AAChD,SAAQC,OAAO,QAAO,0BAA0B;;;;;AAMhD,OAAM,MAAOC,gBAAgB;EAE3BC,YAAoBC,IAAgB,EAAUC,MAAc,EAAUC,OAAsB;IAAxE,SAAI,GAAJF,IAAI;IAAsB,WAAM,GAANC,MAAM;IAAkB,YAAO,GAAPC,OAAO;IAD3E,cAAS,GAAG,IAAIN,eAAe,CAAU,IAAIC,OAAO,GAAC;IAEnD,IAAI,CAACM,qBAAqB,EAAE;EAChC;EAEAA,qBAAqB;IACjB,IAAIC,YAAY,GAAG,IAAI,CAACC,cAAc,EAAE;IACxC,IAAGD,YAAY,EAAC;MACZ,IAAI,CAACE,UAAU,CAACC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAAC,CAAC;;EAEjD;EAEAC,cAAc;IACV,IAAID,YAAY,GAAGK,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IACjD,OAAON,YAAY;EACvB;EAEAE,UAAU,CAACK,IAAa;IACpB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACF,IAAI,CAAC;EAC7B;EAEAG,UAAU;IACN,OAAO,IAAI,CAACF,SAAS,CAACG,YAAY,EAAE;EACxC;EAEAC,KAAK,CAACC,WAAoB;IACtB,OAAO,IAAI,CAACjB,IAAI,CAACkB,IAAI,CAAU,6BAA6B,EAAED,WAAW,CAAC;EAC9E;EAEAE,MAAM;IACFV,YAAY,CAACW,UAAU,CAAC,QAAQ,CAAC;IACjC,IAAI,CAACd,UAAU,CAAC,IAAIT,OAAO,EAAE,CAAC;EAClC;EAEA,IAAWwB,mBAAmB;IAC1B,OAAO,IAAI,CAACT,SAAS,CAACU,KAAK;EAC/B;EAEAC,kBAAkB,CAACC,WAAgB;IAC/B,IAAIpB,YAAY,GAAGK,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IACjD,IAAIe,IAAI,GAAY;MAChBC,GAAG,EAAEF,WAAW,CAACG,OAAO;MACxBC,KAAK,EAAEJ,WAAW,CAACI;KACtB;IAEDnB,YAAY,CAACoB,OAAO,CAAC,QAAQ,EAAEtB,IAAI,CAACuB,SAAS,CAACL,IAAI,CAAC,CAAC;IACpD,IAAI,CAACnB,UAAU,CAACmB,IAAI,CAAC;EACzB;EAEAM,YAAY;IACR,IAAI3B,YAAY,GAAG,IAAI,CAACC,cAAc,EAAE;IACxC,OAAQD,YAAY,GAAI,IAAI,GAAG,KAAK;EACxC;EAEA4B,YAAY,CAACf,WAAoB;IAC7B,OAAO,IAAI,CAACjB,IAAI,CAACkB,IAAI,CAAC,iCAAiC,EAAED,WAAW,CAAC;EACzE;EAEAgB,QAAQ,CAACL,KAAa;IACnB;EAAA;EAGHM,QAAQ;IACJ,OAAO,IAAI,CAAChC,OAAO,CAACiC,GAAG,CAAC,OAAO,CAAC;EACpC;EAAC;qBAjEUrC,gBAAgB;EAAA;EAAA;WAAhBA,gBAAgB;IAAAsC,SAAhBtC,gBAAgB;IAAAuC,YAHf;EAAM","names":["BehaviorSubject","Usuario","SeguridadService","constructor","http","router","cookies","verificarSesionActual","sesionActual","getDatosSesion","setUsuario","JSON","parse","localStorage","getItem","user","elUsuario","next","getUsuario","asObservable","login","infoUsuario","post","logout","removeItem","usuarioSesionActiva","value","guardarDatosSesion","datosSesion","data","_id","user_id","token","setItem","stringify","sesionExiste","crearUsuario","setToken","getToken","get","factory","providedIn"],"sourceRoot":"","sources":["/home/heri/Escritorio/dev/proyecto/VotosCli/src/app/servicios/seguridad.service.ts"],"sourcesContent":["import {HttpClient} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {Router} from '@angular/router';\nimport {CookieService} from 'ngx-cookie-service';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {Usuario} from '../modelos/usuario.model';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class SeguridadService {\n    elUsuario = new BehaviorSubject<Usuario>(new Usuario);\n  constructor(private http: HttpClient, private router: Router, private cookies: CookieService) {\n      this.verificarSesionActual();\n  }\n\n  verificarSesionActual(){\n      let sesionActual = this.getDatosSesion();\n      if(sesionActual){\n          this.setUsuario(JSON.parse(sesionActual));\n      }\n  }\n\n  getDatosSesion(){\n      let sesionActual = localStorage.getItem('sesion');\n      return sesionActual;\n  }\n\n  setUsuario(user: Usuario){\n      this.elUsuario.next(user);\n  }\n\n  getUsuario(){\n      return this.elUsuario.asObservable();\n  }\n\n  login(infoUsuario: Usuario): Observable<Usuario>{\n      return this.http.post<Usuario>(\"http://localhost:8000/login\", infoUsuario);\n  }\n\n  logout(){\n      localStorage.removeItem('sesion');\n      this.setUsuario(new Usuario());\n  }\n\n  public get usuarioSesionActiva(): Usuario{\n      return this.elUsuario.value;\n  }\n\n  guardarDatosSesion(datosSesion: any){\n      let sesionActual = localStorage.getItem('sesion');\n      let data: Usuario = {\n          _id: datosSesion.user_id,\n          token: datosSesion.token,\n      };\n\n      localStorage.setItem('sesion', JSON.stringify(data));\n      this.setUsuario(data);\n  }\n\n  sesionExiste():boolean {\n      let sesionActual = this.getDatosSesion();\n      return (sesionActual) ? true : false;\n  }\n\n  crearUsuario(infoUsuario: Usuario){\n      return this.http.post(\"http://localhost:8000/registrar\", infoUsuario);\n  }\n\n  setToken(token: String) {\n     // this.cookies.set(\"token\", token);\n  }\n\n  getToken() {\n      return this.cookies.get(\"token\");\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}