{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { Usuario } from '../modelos/usuario.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class SeguridadService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.elUsuario = new BehaviorSubject(new Usuario());\n    this.verificarSesionActual();\n  }\n  verificarSesionActual() {\n    let sesionActual = this.getDatosSesion();\n    if (sesionActual) {\n      this.setUsuario(JSON.parse(sesionActual));\n    }\n  }\n  getDatosSesion() {\n    let sesionActual = localStorage.getItem('sesion');\n    return sesionActual;\n  }\n  setUsuario(user) {\n    this.elUsuario.next(user);\n  }\n  getUsuario() {\n    return this.elUsuario.asObservable();\n  }\n  login(infoUsuario) {\n    return this.http.post(\"http://localhost:8000/login\", infoUsuario);\n  }\n  logout() {\n    localStorage.removeItem('sesion');\n    this.setUsuario(new Usuario());\n  }\n  get usuarioSesionActiva() {\n    return this.elUsuario.value;\n  }\n  guardarDatosSesion(datosSesion) {\n    let sesionActual = localStorage.getItem('sesion');\n    let data = {\n      _id: datosSesion._id,\n      token: datosSesion.token,\n      rol: datosSesion.rol,\n      email: datosSesion.email,\n      passwd: datosSesion.passwd,\n      rolId: datosSesion.rolId\n    };\n    localStorage.setItem('sesion', JSON.stringify(data));\n    this.setUsuario(data);\n  }\n  sesionExiste() {\n    let sesionActual = this.getDatosSesion();\n    return sesionActual ? true : false;\n  }\n  crearUsuario(infoUsuario) {\n    return this.http.post(\"http://localhost:8000/registrar\", infoUsuario);\n  }\n  listarUsers() {\n    return this.http.get(\"http://localhost:8500/usuarios\");\n  }\n  actualizarUsuario(idUsuario, idRol, cuerpo) {\n    return this.http.put(\"http://localhost:8500/updateUsuario/\" + idUsuario + \"/rolId/\" + idRol, cuerpo);\n  }\n  eliminarUsuario(idUser) {\n    return this.http.delete(\"http://localhost:8500/borrarUsuario/\" + idUser);\n  }\n  static #_ = this.ɵfac = function SeguridadService_Factory(t) {\n    return new (t || SeguridadService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SeguridadService,\n    factory: SeguridadService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAGA,SAAQA,eAAe,QAAmB,MAAM;AAChD,SAAQC,OAAO,QAAO,0BAA0B;;;;AAMhD,OAAM,MAAOC,gBAAgB;EAE3BC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IADlD,cAAS,GAAG,IAAIL,eAAe,CAAU,IAAIC,OAAO,GAAC;IAEnD,IAAI,CAACK,qBAAqB,EAAE;EAChC;EAEAA,qBAAqB;IACjB,IAAIC,YAAY,GAAG,IAAI,CAACC,cAAc,EAAE;IACxC,IAAGD,YAAY,EAAC;MACZ,IAAI,CAACE,UAAU,CAACC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAAC,CAAC;;EAEjD;EAEAC,cAAc;IACV,IAAID,YAAY,GAAGK,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IACjD,OAAON,YAAY;EACvB;EAEAE,UAAU,CAACK,IAAa;IACpB,IAAI,CAACC,SAAS,CAACC,IAAI,CAACF,IAAI,CAAC;EAC7B;EAEAG,UAAU;IACN,OAAO,IAAI,CAACF,SAAS,CAACG,YAAY,EAAE;EACxC;EAEAC,KAAK,CAACC,WAAoB;IACtB,OAAO,IAAI,CAAChB,IAAI,CAACiB,IAAI,CAAU,6BAA6B,EAAED,WAAW,CAAC;EAC9E;EAEAE,MAAM;IACFV,YAAY,CAACW,UAAU,CAAC,QAAQ,CAAC;IACjC,IAAI,CAACd,UAAU,CAAC,IAAIR,OAAO,EAAE,CAAC;EAClC;EAEA,IAAWuB,mBAAmB;IAC1B,OAAO,IAAI,CAACT,SAAS,CAACU,KAAK;EAC/B;EAEAC,kBAAkB,CAACC,WAAgB;IAC/B,IAAIpB,YAAY,GAAGK,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IACjD,IAAIe,IAAI,GAAY;MAChBC,GAAG,EAAEF,WAAW,CAACE,GAAG;MACpBC,KAAK,EAAEH,WAAW,CAACG,KAAK;MACxBC,GAAG,EAAEJ,WAAW,CAACI,GAAG;MACpBC,KAAK,EAAEL,WAAW,CAACK,KAAK;MACxBC,MAAM,EAAEN,WAAW,CAACM,MAAM;MAC1BC,KAAK,EAAEP,WAAW,CAACO;KAEtB;IAEHtB,YAAY,CAACuB,OAAO,CAAC,QAAQ,EAAEzB,IAAI,CAAC0B,SAAS,CAACR,IAAI,CAAC,CAAC;IAClD,IAAI,CAACnB,UAAU,CAACmB,IAAI,CAAC;EACzB;EAEAS,YAAY;IACR,IAAI9B,YAAY,GAAG,IAAI,CAACC,cAAc,EAAE;IACxC,OAAQD,YAAY,GAAI,IAAI,GAAG,KAAK;EACxC;EAEA+B,YAAY,CAAClB,WAAoB;IAC7B,OAAO,IAAI,CAAChB,IAAI,CAACiB,IAAI,CAAC,iCAAiC,EAAED,WAAW,CAAC;EACzE;EAEAmB,WAAW;IACP,OAAO,IAAI,CAACnC,IAAI,CAACoC,GAAG,CAAU,gCAAgC,CAAC;EACnE;EAEAC,iBAAiB,CAACC,SAAiB,EAAEC,KAAY,EAAEC,MAAU;IAEzD,OAAO,IAAI,CAACxC,IAAI,CAACyC,GAAG,CAAC,sCAAsC,GAACH,SAAS,GAAC,SAAS,GAACC,KAAK,EAAEC,MAAM,CAAC;EAClG;EAEAE,eAAe,CAACC,MAAa;IACzB,OAAO,IAAI,CAAC3C,IAAI,CAAC4C,MAAM,CAAC,sCAAsC,GAACD,MAAM,CAAC;EAC1E;EAAC;qBA3EU7C,gBAAgB;EAAA;EAAA;WAAhBA,gBAAgB;IAAA+C,SAAhB/C,gBAAgB;IAAAgD,YAHf;EAAM","names":["BehaviorSubject","Usuario","SeguridadService","constructor","http","router","verificarSesionActual","sesionActual","getDatosSesion","setUsuario","JSON","parse","localStorage","getItem","user","elUsuario","next","getUsuario","asObservable","login","infoUsuario","post","logout","removeItem","usuarioSesionActiva","value","guardarDatosSesion","datosSesion","data","_id","token","rol","email","passwd","rolId","setItem","stringify","sesionExiste","crearUsuario","listarUsers","get","actualizarUsuario","idUsuario","idRol","cuerpo","put","eliminarUsuario","idUser","delete","factory","providedIn"],"sourceRoot":"","sources":["/home/heri/Escritorio/dev/proyecto/VotosCli/src/app/servicios/seguridad.service.ts"],"sourcesContent":["import {HttpClient} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {Router} from '@angular/router';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {Usuario} from '../modelos/usuario.model';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class SeguridadService {\n    elUsuario = new BehaviorSubject<Usuario>(new Usuario);\n  constructor(private http: HttpClient, private router: Router) {\n      this.verificarSesionActual();\n  }\n\n  verificarSesionActual(){\n      let sesionActual = this.getDatosSesion();\n      if(sesionActual){\n          this.setUsuario(JSON.parse(sesionActual));\n      }\n  }\n\n  getDatosSesion(){\n      let sesionActual = localStorage.getItem('sesion');\n      return sesionActual;\n  }\n\n  setUsuario(user: Usuario){\n      this.elUsuario.next(user);\n  }\n\n  getUsuario(){\n      return this.elUsuario.asObservable();\n  }\n\n  login(infoUsuario: Usuario): Observable<Usuario>{\n      return this.http.post<Usuario>(\"http://localhost:8000/login\", infoUsuario);\n  }\n\n  logout(){\n      localStorage.removeItem('sesion');\n      this.setUsuario(new Usuario());\n  }\n\n  public get usuarioSesionActiva(): Usuario{\n      return this.elUsuario.value;\n  }\n\n  guardarDatosSesion(datosSesion: any){\n      let sesionActual = localStorage.getItem('sesion');\n      let data: Usuario = {\n          _id: datosSesion._id,\n          token: datosSesion.token,\n          rol: datosSesion.rol,\n          email: datosSesion.email,\n          passwd: datosSesion.passwd,\n          rolId: datosSesion.rolId\n\n      };\n\n    localStorage.setItem('sesion', JSON.stringify(data));\n      this.setUsuario(data);\n  }\n\n  sesionExiste():boolean {\n      let sesionActual = this.getDatosSesion();\n      return (sesionActual) ? true : false;\n  }\n\n  crearUsuario(infoUsuario: Usuario){\n      return this.http.post(\"http://localhost:8000/registrar\", infoUsuario);\n  }\n\n  listarUsers(){\n      return this.http.get<Usuario>(\"http://localhost:8500/usuarios\");\n  }\n\n  actualizarUsuario(idUsuario: String, idRol:String, cuerpo:any){\n\n      return this.http.put(\"http://localhost:8500/updateUsuario/\"+idUsuario+\"/rolId/\"+idRol, cuerpo);\n  }\n\n  eliminarUsuario(idUser:String){\n      return this.http.delete(\"http://localhost:8500/borrarUsuario/\"+idUser);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}